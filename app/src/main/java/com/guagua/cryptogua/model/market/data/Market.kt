package com.guagua.cryptogua.model.market.data

import com.guagua.cryptogua.model.market.remote.data.MarketBean
import com.guagua.cryptogua.model.market.remote.data.QuoteBean

data class Market(
    val marketName: String,
    val active: Boolean,
    val marketClosed: Boolean,
    val matchingDisabled: Boolean,
    val future: Boolean,
    val timeBasedContract: Boolean,
    val openTime: Long,
    val closeTime: Long,
    val startMatching: Long,
    val inactiveTime: Long,
    val sortId: Int,
    val lastUpdate: Long,
    val symbol: String,
    val quoteCurrency: String,
    val baseCurrency: String,
    val coin: String,
    val multiplier: Int,
    val scale: Int,
    val priceDecimalPoints: Int,
    val fundingRate: Double,
    val openInterest: Long,
    val openInterestUSD: Double,
    val display: Boolean,
    val displayQuote: String,
    val globalDisplayQuote: String,
    val displayOrder: Int,
    val isFavorite: Boolean,
    val availableQuotes: List<Quote>,
    val initialMarginPercentage: Double,
    val maintenanceMarginPercentage: Double,
    val prediction: Boolean,
    val fundingIntervalMinutes: Int,
    val fundingTime: Long,
    val userCustomize: Boolean,
    val favorite: Boolean
) {
    companion object {
        fun from(bean: MarketBean): Market? = with(bean) {
            Market(
                marketName = marketName ?: return@with null,
                active = active ?: false,
                marketClosed = marketClosed ?: false,
                matchingDisabled = matchingDisabled ?: false,
                future = future ?: false,
                timeBasedContract = timeBasedContract ?: false,
                openTime = openTime ?: 0L,
                closeTime = closeTime ?: 0L,
                startMatching = startMatching ?: 0L,
                inactiveTime = inactiveTime ?: 0L,
                sortId = sortId ?: 0,
                lastUpdate = lastUpdate ?: 0L,
                symbol = symbol.orEmpty(),
                quoteCurrency = quoteCurrency.orEmpty(),
                baseCurrency = baseCurrency.orEmpty(),
                coin = coin.orEmpty(),
                multiplier = multiplier ?: 0,
                scale = scale ?: 0,
                priceDecimalPoints = priceDecimalPoints ?: 0,
                fundingRate = fundingRate ?: 0.0,
                openInterest = openInterest ?: 0L,
                openInterestUSD = openInterestUSD ?: 0.0,
                display = display ?: false,
                displayQuote = displayQuote.orEmpty(),
                globalDisplayQuote = globalDisplayQuote.orEmpty(),
                displayOrder = displayOrder ?: 0,
                isFavorite = isFavorite ?: false,
                availableQuotes = availableQuotes?.mapNotNull { Quote.from(it) }.orEmpty(),
                initialMarginPercentage = initialMarginPercentage ?: 0.0,
                maintenanceMarginPercentage = maintenanceMarginPercentage ?: 0.0,
                prediction = prediction ?: false,
                fundingIntervalMinutes = fundingIntervalMinutes ?: 0,
                fundingTime = fundingTime ?: 0L,
                userCustomize = userCustomize ?: false,
                favorite = favorite ?: false
            )
        }
    }
}

data class Quote(
    val id: Int,
    val sortId: Int,
    val name: String,
    val shortName: String,
    val symbol: String,
    val type: Int,
    val status: Int,
    val gmtCreate: Long,
    val gmtModified: Long,
    val decimals: Int,
    val isDefault: Int,
    val minSize: Double,
    val maxSize: Double,
    val increment: Double,
    val isSettlement: Int,
    val depositMin: Double,
    val isStable: Boolean,
    val isQuote: Boolean,
    val isSupportAddressExtension: Boolean,
    val multiplier: Int,
    val scale: Int,
    val tier: String,
    val fiat: Boolean,
    val typeEnum: String,
    val crypto: Boolean,
    val logo: String
) {
    companion object {
        fun from(bean: QuoteBean): Quote? = with(bean) {
            Quote(
                id = id ?: return@with null,
                sortId = sortId ?: 0,
                name = name.orEmpty(),
                shortName = shortName.orEmpty(),
                symbol = symbol.orEmpty(),
                type = type ?: 0,
                status = status ?: 0,
                gmtCreate = gmtCreate ?: 0L,
                gmtModified = gmtModified ?: 0L,
                decimals = decimals ?: 0,
                isDefault = isDefault ?: 0,
                minSize = minSize ?: 0.0,
                maxSize = maxSize ?: 0.0,
                increment = increment ?: 0.0,
                isSettlement = isSettlement ?: 0,
                depositMin = depositMin ?: 0.0,
                isStable = isStable ?: false,
                isQuote = isQuote ?: false,
                isSupportAddressExtension = isSupportAddressExtension ?: false,
                multiplier = multiplier ?: 0,
                scale = scale ?: 0,
                tier = tier.orEmpty(),
                fiat = fiat ?: false,
                typeEnum = typeEnum.orEmpty(),
                crypto = crypto ?: false,
                logo = logo.orEmpty()
            )
        }
    }
}